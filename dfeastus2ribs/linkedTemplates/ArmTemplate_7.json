{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dfeastus2ribs"
		},
		"eventbased_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/2e7c66d3-4d75-4c4c-baac-29a667540959/resourceGroups/ribs/providers/Microsoft.Storage/storageAccounts/saribs"
		},
		"eventbased_example_properties_pl_errorhandlin_example2_parameters_filename": {
			"type": "string",
			"defaultValue": "country"
		},
		"eventbased_example_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/2e7c66d3-4d75-4c4c-baac-29a667540959/resourceGroups/ribs/providers/Microsoft.Storage/storageAccounts/saribs"
		},
		"trigger_example1_properties_pl_errorhandlin_example2_parameters_filename": {
			"type": "string",
			"defaultValue": "country"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_executepipeline_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "exp_forecha",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_errorhandlin_example",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"folder": {
					"name": "A-Surya Sir"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T12:44:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_fact_delta_factsales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "lkp_get_lastupdatedate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.partablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onpremises_sql_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "sp_truncate_staging_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_completed_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_update_watermark_lastUpdateddate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_piplinestart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_lkp_get_derails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('lkp_get_details').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('lkp_get_details').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_truncatestagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT [SalesOrderID]\n      ,[SalesOrderDetailID]\n      ,[CarrierTrackingNumber]\n      ,[OrderQty]\n      ,[ProductNumber]\n      ,[ProductID]\n      ,[UnitPrice]\n      ,[UnitPriceDiscount]\n      ,[TotalAmount]\n      ,[OrderDate]\n      ,[DueDate]\n      ,[ShipDate]\n      ,[OrderMode]\n      ,[CustomerNumber]\n      ,[TerriorityName]\n      ,[ModifiedDate]\n  FROM [salesdata].[@{activity('lkp_get_details').output.firstrow.SourceViewName}]\n  WHERE CAST(ModifiedDate AS date) >= CAST('@{activity('lkp_get_lastupdatedate').output.firstrow.LastUpdateDate}' AS date)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								}
							},
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_onpremises_adw_for_dynamicQuery",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.StaingTableName",
										"type": "Expression"
									},
									"schemaname": {
										"value": "@activity('lkp_get_details').output.firstrow.StagingSchemaName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_insert_updatedimtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@activity('lkp_get_details').output.firstrow.ProcedureName",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_lastupdatedate",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT LastUpdateDate FROM Watermark WHERE TableName='@{pipeline().parameters.partablename}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onpremises_sql_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "lkp_get_max_update_fact",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": "SELECT TOP 1 MAX(LastUpdatedDate) AS LastUpdatedDate FROM [Reporting].[FactSales]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "xxx",
									"schemaname": "ttt"
								}
							}
						}
					},
					{
						"name": "sp_update_watermark_lastUpdateddate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_max_update_fact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Watermark_update_lastupdate]",
							"storedProcedureParameters": {
								"LastUpdatedDate": {
									"value": {
										"value": "@activity('lkp_get_max_update_fact').output.firstrow.LastUpdatedDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.partablename",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"partablename": {
						"type": "string",
						"defaultValue": "FactSales"
					}
				},
				"variables": {
					"varviewname": {
						"type": "String",
						"defaultValue": "Test"
					},
					"vardimtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varstagingtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varprocedure": {
						"type": "String",
						"defaultValue": "Test"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-05T04:24:56Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_fact_factsales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.partablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onpremises_sql_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "sp_truncate_staging_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_completed_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_update_watermark_lastUpdateddate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_piplinestart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_lkp_get_derails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('lkp_get_details').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('lkp_get_details').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_truncatestagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								}
							},
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_onpremises_adw",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "salesdata",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.SourceViewName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.StaingTableName",
										"type": "Expression"
									},
									"schemaname": {
										"value": "@activity('lkp_get_details').output.firstrow.StagingSchemaName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_insert_updatedimtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@activity('lkp_get_details').output.firstrow.ProcedureName",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_max_update_fact",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": "SELECT TOP 1 MAX(LastUpdatedDate) AS LastUpdatedDate FROM [Reporting].[FactSales]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "xxx",
									"schemaname": "ttt"
								}
							}
						}
					},
					{
						"name": "sp_update_watermark_lastUpdateddate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_max_update_fact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Watermark_update_lastupdate]",
							"storedProcedureParameters": {
								"LastUpdatedDate": {
									"value": {
										"value": "@activity('lkp_get_max_update_fact').output.firstrow.LastUpdatedDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.partablename",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"partablename": {
						"type": "string",
						"defaultValue": "FactSales"
					}
				},
				"variables": {
					"varviewname": {
						"type": "String",
						"defaultValue": "Test"
					},
					"vardimtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varstagingtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varprocedure": {
						"type": "String",
						"defaultValue": "Test"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-05T03:55:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "table name lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select tablename from dbo.tablename;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_output",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "xxx"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "table foreachloop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "table name lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('table name lookup').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "cop data from sql to blob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_sql_output",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@item().tablename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob",
											"type": "DatasetReference",
											"parameters": {
												"blobfolder": {
													"value": "@pipeline().parameters.des_folder",
													"type": "Expression"
												},
												"blobfile": {
													"value": "@item().tablename",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"des_folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Narendra"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-27T11:26:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_lookup_untill_wait')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "table name lookup",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "until status completed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select tablename from dbo.tablename;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_output",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "xxx"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "table foreachloop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "table name lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('table name lookup').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "cop data from sql to blob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_sql_output",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@item().tablename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob",
											"type": "DatasetReference",
											"parameters": {
												"blobfolder": {
													"value": "@pipeline().parameters.des_folder",
													"type": "Expression"
												},
												"blobfile": {
													"value": "@item().tablename",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "until status completed",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,activity('Lookup1').output.firstrow.result)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select 1 as result from tab_status where t_status='completed'\nunion\nselect 0 as result;",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sql_output",
											"type": "DatasetReference",
											"parameters": {
												"tablename": "xxx"
											}
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 20
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"parameters": {
					"des_folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Narendra"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-27T09:36:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sqlserver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_file_folder_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().parameters.srcfolder",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.srcfile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_SqlServerTable_venu",
								"type": "DatasetReference",
								"parameters": {
									"table_name": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"srcfolder": {
						"type": "string"
					},
					"srcfile": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "venu"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-29T09:27:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sqlserver_to_blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cp_sqlserver_to_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sqlserver_ash",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_demo_ash",
								"type": "DatasetReference",
								"parameters": {
									"foldername": {
										"value": "@pipeline().parameters.foldername",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"tablename": {
						"type": "string"
					},
					"foldername": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-31T13:17:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sqltoblob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_to_blob",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@pipeline().parameters.Table_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_copyfrom_sql",
								"type": "DatasetReference",
								"parameters": {
									"folder_name": {
										"value": "@pipeline().parameters.folder_name",
										"type": "Expression"
									},
									"File_name": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"folder_name": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"Table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "abrar"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T10:55:07Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_testdataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dftestmovie",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dftestmoviedata",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"moviedata": {},
									"sinkavgratingbyyead": {},
									"sinkavgbygeners": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "A-Surya Sir"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T12:44:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventbased')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_errorhandlin_example",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/event/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('eventbased_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventbased_example')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_errorhandlin_example2",
							"type": "PipelineReference"
						},
						"parameters": {
							"filename": "[parameters('eventbased_example_properties_pl_errorhandlin_example2_parameters_filename')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/event/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('eventbased_example_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_example1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_errorhandlin_example2",
							"type": "PipelineReference"
						},
						"parameters": {
							"filename": "[parameters('trigger_example1_properties_pl_errorhandlin_example2_parameters_filename')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-05-28T04:30:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"hours": [
								5,
								9,
								11,
								16
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_sche_1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "sql_storeprocedure",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 2,
						"startTime": "2021-05-28T04:43:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_masterdimension_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_product",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_productSubcategory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_dim_product",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partablename": {
									"value": "@pipeline().parameters.parproducttablename",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_productcategory",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_dim_productcategory",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partablename": {
									"value": "@pipeline().parameters.parProductCategorytablename",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_productSubcategory",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_productcategory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_dim_productsubcategory",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partablename": {
									"value": "@pipeline().parameters.parProdcutsubCategorytablename",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_salesterriority_dim",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_customer_dim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_dim_salesterriority",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partablename": {
									"value": "@pipeline().parameters.parSalesTerriorityTableName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_customer_dim",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_productcategory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_dim_customer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partablename": {
									"value": "@pipeline().parameters.parCustomerTableName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ep_product",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ep_salesterriority_dim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"parproducttablename": {
						"type": "string",
						"defaultValue": "Product"
					},
					"parProductCategorytablename": {
						"type": "string",
						"defaultValue": "ProductCategory"
					},
					"parProdcutsubCategorytablename": {
						"type": "string",
						"defaultValue": "ProductSubCategory"
					},
					"parCustomerTableName": {
						"type": "string",
						"defaultValue": "Customer"
					},
					"parSalesTerriorityTableName": {
						"type": "string",
						"defaultValue": "SalesTerritory"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-01T11:31:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_masterfact_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_factsales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_fact_factsales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partablename": {
									"value": "@pipeline().parameters.parfacttable",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ep_factsales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"parfacttable": {
						"type": "string",
						"defaultValue": "FactSales"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-01T03:58:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_fact_factsales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tg_moviedata_datflow')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_testdataflow",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-05-27T04:28:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"hours": [
								5,
								10,
								14,
								18
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_testdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_masterdelta_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_factsales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_dimensionload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_fact_delta_factsales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ep_factsales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ep_dimensionload",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_masterdimension_load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "send-email-on-completion",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "sp_update_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-01.eastus2.logic.azure.com:443/workflows/53550fda499a408abb3f69c0cfb550c6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itX5RPvskxILBXJ9xx8gzNffnmCV90BUdFzb4WqqWdk",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"title\": \"@{pipeline().Pipeline}  executed successfully\",\n    \"message\": \"@{pipeline().Pipeline}  executed successfully\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\",\n    \"emailaddress\":\"@{pipeline().parameters.emailaddress}\"\n}\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "send-email-on-failur-dimension",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ep_dimensionload",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-01.eastus2.logic.azure.com:443/workflows/53550fda499a408abb3f69c0cfb550c6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itX5RPvskxILBXJ9xx8gzNffnmCV90BUdFzb4WqqWdk",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"title\": \"@{pipeline().Pipeline} Failed\",\n    \"message\": \"@{activity('ep_dimensionload').error.Message}\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\",\n    \"emailaddress\":\"@{pipeline().parameters.emailaddress}\"\n}\nactivity('ep_dimensionload').output",
								"type": "Expression"
							}
						}
					},
					{
						"name": "send-email-on-failure-fact",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ep_factsales",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-01.eastus2.logic.azure.com:443/workflows/53550fda499a408abb3f69c0cfb550c6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itX5RPvskxILBXJ9xx8gzNffnmCV90BUdFzb4WqqWdk",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"title\": \"@{pipeline().Pipeline}  Failed\",\n    \"message\": \"@{activity('ep_factsales').error.message}\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\",\n    \"emailaddress\":\"@{pipeline().parameters.emailaddress}\"\n}\n",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"parfacttable": {
						"type": "string",
						"defaultValue": "FactSales"
					},
					"parprodcuttable": {
						"type": "string",
						"defaultValue": "Product"
					},
					"parproductCategory": {
						"type": "string",
						"defaultValue": "ProductCategory"
					},
					"parprodsubcategory": {
						"type": "string",
						"defaultValue": "ProductSubCategory"
					},
					"parcustomer": {
						"type": "string",
						"defaultValue": "Customer"
					},
					"parsalesterriority": {
						"type": "string",
						"defaultValue": "SalesTerriority"
					},
					"emailaddress": {
						"type": "string",
						"defaultValue": "prasadnarendra69@gmail.com;rsnbhupathi@gmail.com"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-05T04:24:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_fact_delta_factsales')]",
				"[concat(variables('factoryId'), '/pipelines/pl_masterdimension_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_masterfull_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_factsales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_dimensionload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_masterfact_load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"parfacttable": {
									"value": "@pipeline().parameters.parfacttable",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ep_factsales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ep_dimensionload",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_masterdimension_load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "send-email-on-completion",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "sp_update_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-01.eastus2.logic.azure.com:443/workflows/53550fda499a408abb3f69c0cfb550c6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itX5RPvskxILBXJ9xx8gzNffnmCV90BUdFzb4WqqWdk",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"title\": \"@{pipeline().Pipeline}  executed successfully\",\n    \"message\": \"@{pipeline().Pipeline}  executed successfully\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\",\n    \"emailaddress\":\"@{pipeline().parameters.emailaddress}\"\n}\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "send-email-on-failur-dimension",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ep_dimensionload",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-01.eastus2.logic.azure.com:443/workflows/53550fda499a408abb3f69c0cfb550c6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itX5RPvskxILBXJ9xx8gzNffnmCV90BUdFzb4WqqWdk",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"title\": \"@{pipeline().Pipeline} Failed\",\n    \"message\": \"@{activity('ep_dimensionload').error.Message}\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\",\n    \"emailaddress\":\"@{pipeline().parameters.emailaddress}\"\n}\nactivity('ep_dimensionload').output",
								"type": "Expression"
							}
						}
					},
					{
						"name": "send-email-on-failure-fact",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ep_factsales",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-01.eastus2.logic.azure.com:443/workflows/53550fda499a408abb3f69c0cfb550c6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itX5RPvskxILBXJ9xx8gzNffnmCV90BUdFzb4WqqWdk",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"title\": \"@{pipeline().Pipeline}  Failed\",\n    \"message\": \"@{activity('ep_factsales').error.message}\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\",\n    \"emailaddress\":\"@{pipeline().parameters.emailaddress}\"\n}\n",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"parfacttable": {
						"type": "string",
						"defaultValue": "FactSales"
					},
					"parprodcuttable": {
						"type": "string",
						"defaultValue": "Product"
					},
					"parproductCategory": {
						"type": "string",
						"defaultValue": "ProductCategory"
					},
					"parprodsubcategory": {
						"type": "string",
						"defaultValue": "ProductSubCategory"
					},
					"parcustomer": {
						"type": "string",
						"defaultValue": "Customer"
					},
					"parsalesterriority": {
						"type": "string",
						"defaultValue": "SalesTerriority"
					},
					"emailaddress": {
						"type": "string",
						"defaultValue": "prasadnarendra69@gmail.com;rsnbhupathi@gmail.com"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-01T04:26:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_masterfact_load')]",
				"[concat(variables('factoryId'), '/pipelines/pl_masterdimension_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tg_masterdimensionload')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_masterdimension_load",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-05-31T05:08:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								5
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_masterdimension_load')]"
			]
		}
	]
}