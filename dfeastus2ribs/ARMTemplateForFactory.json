{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dfeastus2ribs"
		},
		"LS_sql_server_ashwanth_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_sql_server_ashwanth'"
		},
		"SqlServer2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer2'"
		},
		"SqlServer3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer3'"
		},
		"Sqlserver_np_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Sqlserver_np'"
		},
		"is_linked_raja_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'is_linked_raja'"
		},
		"linkedService1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService1'"
		},
		"ls_SqlServer_mahendra_configdb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_SqlServer_mahendra_configdb'"
		},
		"ls_SqlServer_venu_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_SqlServer_venu'"
		},
		"ls_Sqlserver_mahendra_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_Sqlserver_mahendra'"
		},
		"ls_azure_synapse_ribs_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azure_synapse_ribs'"
		},
		"ls_blob_saribs_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_blob_saribs'"
		},
		"ls_datawarehouse_mahendra_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_datawarehouse_mahendra'"
		},
		"ls_gen2_key_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_gen2_key'"
		},
		"ls_has_datawarehouse_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_has_datawarehouse'"
		},
		"ls_hash_adventure_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_hash_adventure'"
		},
		"ls_npsql_advanture2014_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_npsql_advanture2014'"
		},
		"ls_onpremise_sql_ConfigDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_onpremise_sql_ConfigDB'"
		},
		"ls_onpremises_sql_ADW_source_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_onpremises_sql_ADW_source'"
		},
		"ls_pocsqldb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_pocsqldb'"
		},
		"ls_selfhost_hasham_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_selfhost_hasham'"
		},
		"ls_sql_has_Datawarehouse_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_has_Datawarehouse'"
		},
		"ls_sql_hash_AdventureWorks_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_hash_AdventureWorks'"
		},
		"ls_sqlserver_DWH_ashwanth_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sqlserver_DWH_ashwanth'"
		},
		"ls_sqlserver_adventure_ashwanth_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sqlserver_adventure_ashwanth'"
		},
		"ls_sqlserver_configDB_ashwanth_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sqlserver_configDB_ashwanth'"
		},
		"ls_synapse_ribs_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_synapse_ribs'"
		},
		"np_ls_sql_warehouse_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'np_ls_sql_warehouse'"
		},
		"selfhosted_raja_is_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'selfhosted_raja_is'"
		},
		"HttpServer1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rebrickable.com/downloads/"
		},
		"kv_ribs_dev_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-ribs-dev.vault.azure.net/"
		},
		"ls_datalakegen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dlsgen2synapse.dfs.core.windows.net"
		},
		"ls_gen2_key_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dlsgen2synapse.dfs.core.windows.net"
		},
		"np_azure_keyvault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://prasadkeyvault.vault.azure.net/"
		},
		"eventbased_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/2e7c66d3-4d75-4c4c-baac-29a667540959/resourceGroups/ribs/providers/Microsoft.Storage/storageAccounts/saribs"
		},
		"eventbased_example_properties_pl_errorhandlin_example2_parameters_filename": {
			"type": "string",
			"defaultValue": "country"
		},
		"eventbased_example_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/2e7c66d3-4d75-4c4c-baac-29a667540959/resourceGroups/ribs/providers/Microsoft.Storage/storageAccounts/saribs"
		},
		"trigger_example1_properties_pl_errorhandlin_example2_parameters_filename": {
			"type": "string",
			"defaultValue": "country"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_pku')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_pku",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "themes.csv.gz"
							},
							{
								"name": "Destination",
								"value": "narendra//themes.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_pku",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_pku",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-05-28T19:55:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_pku')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_pku')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_to_blob_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_folderR",
								"type": "DatasetReference",
								"parameters": {
									"sourcefolder": {
										"value": "@pipeline().parameters.sourcefolder",
										"type": "Expression"
									},
									"source file": {
										"value": "@pipeline().parameters.sourcefile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_to_blob_activity1",
								"type": "DatasetReference",
								"parameters": {
									"sinkfolder": {
										"value": "@pipeline().parameters.sinkfolder",
										"type": "Expression"
									},
									"sinkfile": {
										"value": "@pipeline().parameters.sinkfile",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"sourcefolder": {
						"type": "string"
					},
					"sourcefile": {
						"type": "string"
					},
					"sinkfolder": {
						"type": "string"
					},
					"sinkfile": {
						"type": "string"
					}
				},
				"folder": {
					"name": "raja"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T02:15:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_folderR')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_to_blob_activity1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy last 2 days modified file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copylast2 days modified data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@adddays(utcnow(),-2)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"wildcardFolderPath": {
										"value": "@pipeline().parameters.inputfoldername",
										"type": "Expression"
									},
									"wildcardFileName": "*.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blobfolder",
								"type": "DatasetReference",
								"parameters": {
									"foldername": {
										"value": "@pipeline().parameters.inputfoldername",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blobfolder",
								"type": "DatasetReference",
								"parameters": {
									"foldername": {
										"value": "@pipeline().parameters.outputfoldername",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"inputfoldername": {
						"type": "string"
					},
					"outputfoldername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Narendra"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-10T07:11:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blobfolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_order_details')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_order_details",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_orders",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-27T12:56:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_orders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/foreachloop')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blobfolder",
								"type": "DatasetReference",
								"parameters": {
									"foldername": {
										"value": "@pipeline().parameters.blobfolder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childitems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_blob",
											"type": "DatasetReference",
											"parameters": {
												"blobfolder": {
													"value": "@pipeline().parameters.blobfolder",
													"type": "Expression"
												},
												"blobfile": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob",
											"type": "DatasetReference",
											"parameters": {
												"blobfolder": {
													"value": "@pipeline().parameters.des_folder",
													"type": "Expression"
												},
												"blobfile": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"blobfolder": {
						"type": "string"
					},
					"des_folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "test"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-27T16:05:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blobfolder')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/has_pl_dim_productcategory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_insert_initialpipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "inprogress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_selfhost_hasham",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lu_getdata_db",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_insert_initialpipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.tablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ConfigDB_hash",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "productcategory"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "sp_truncate_stagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lu_getdata_db",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lu_getdata_db').output.value[0].StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lu_getdata_db').output.value[0].StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_has_datawarehouse",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_stagingtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_has_adventure",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": "salesdata",
									"tablename": {
										"value": "@activity('lu_getdata_db').output.value[0].sourceviewname",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_has_sql_datawarehouse",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "@activity('lu_getdata_db').output.value[0].stagingschemaname",
										"type": "Expression"
									},
									"tablename": {
										"value": "activity('lu_getdata_db').output.value[0].staingtablename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-03T17:01:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_selfhost_hasham')]",
				"[concat(variables('factoryId'), '/datasets/ds_ConfigDB_hash')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_has_datawarehouse')]",
				"[concat(variables('factoryId'), '/datasets/ds_has_adventure')]",
				"[concat(variables('factoryId'), '/datasets/ds_has_sql_datawarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/np_pl_dim_productcategories')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pl_pipeline_startinfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "inprogress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lookup for tablename",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "pl_pipeline_startinfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.tablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "np_ds_sql_noparameter",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "pl_sp_truncate_staging_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lookup for tablename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lookup for tablename').output.value[0].StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lookup for tablename').output.value[0].StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "np_ls_sql_warehouse",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "pl_sp_truncate_staging_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "np_ds_adventure2014",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "salesdata",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lookup for tablename').output.value[0].sourceviewname",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "np_ds_datawarehouse_sql",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "@activity('lookup for tablename').output.value[0].stagingschemaname",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lookup for tablename').output.value[0].staingtablename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_update_error_startpipelin",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "pl_pipeline_startinfo",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('pl_pipeline_startinfo').error.errorcode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('pl_pipeline_startinfo').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "pl_pipeline_truncateinfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "pl_sp_truncate_staging_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('pl_sp_truncate_staging_table').error.errorcode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('pl_sp_truncate_staging_table').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "pl_pipeline_copyinfo erro",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('Copy data1').error.errorcode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('Copy data1').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_lookup_error_startpipelin",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lookup for tablename",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('lookup for tablename').error.errorcode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('lookup for tablename').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Narendra"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-03T11:53:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sqlserver_np')]",
				"[concat(variables('factoryId'), '/datasets/np_ds_sql_noparameter')]",
				"[concat(variables('factoryId'), '/linkedServices/np_ls_sql_warehouse')]",
				"[concat(variables('factoryId'), '/datasets/np_ds_adventure2014')]",
				"[concat(variables('factoryId'), '/datasets/np_ds_datawarehouse_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "moviedata",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "moviesdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"movesdata": {},
									"sinkblob": {},
									"sinkgneres": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "A-Surya Sir"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T12:44:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/moviesdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"folder": {
					"name": "Narendra"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_blob_to_blob_ashwanth')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob_ashwanth",
								"type": "DatasetReference",
								"parameters": {
									"foldername": {
										"value": "@pipeline().parameters.scr_folder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childitems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_blob",
											"type": "DatasetReference",
											"parameters": {
												"blobfolder": {
													"value": "@pipeline().parameters.scr_folder",
													"type": "Expression"
												},
												"blobfile": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob",
											"type": "DatasetReference",
											"parameters": {
												"blobfolder": {
													"value": "@pipeline().parameters.des_folder",
													"type": "Expression"
												},
												"blobfile": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"scr_folder": {
						"type": "string"
					},
					"des_folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-27T16:05:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_ashwanth')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_blob_to_blob_foreach_ash')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1_ash",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob_ash1",
								"type": "DatasetReference",
								"parameters": {
									"scr_folder": {
										"value": "@pipeline().parameters.scr_folder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1_ash",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1_ash",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1_ash').output.childitems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "cp_blob_to_blob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_blob_ash",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@pipeline().parameters.scr_folder",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob_ash",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@pipeline().parameters.des_folder",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"scr_folder": {
						"type": "string"
					},
					"des_folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T06:39:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_ash1')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_ash')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_blob_to_sqlserver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cp_blob_to_sqlserver",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_demo_ash",
								"type": "DatasetReference",
								"parameters": {
									"foldername": {
										"value": "@pipeline().parameters.foldername",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sqlserver_ash",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"foldername": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-31T13:43:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_demo_ash')]",
				"[concat(variables('factoryId'), '/datasets/ds_sqlserver_ash')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_blob2blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cp_b2b",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_file_folder_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().parameters.srcfolder",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.srcfile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_file_folder_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().parameters.snkfolder",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.snkfile",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"srcfolder": {
						"type": "string",
						"defaultValue": "string"
					},
					"srcfile": {
						"type": "string",
						"defaultValue": "string"
					},
					"snkfolder": {
						"type": "string",
						"defaultValue": "string"
					},
					"snkfile": {
						"type": "string",
						"defaultValue": "string"
					}
				},
				"folder": {
					"name": "venu"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-29T08:19:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_file_folder_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_blobtoblob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blobfolder",
								"type": "DatasetReference",
								"parameters": {
									"foldername": {
										"value": "@pipeline().parameters.src_folder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childitems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_blob_folder",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@pipeline().parameters.src_folder",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob_folder",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@pipeline().parameters.des_folder",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"src_folder": {
						"type": "string"
					},
					"des_folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "A-Surya Sir"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T12:44:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blobfolder')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_folder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_foreach_bolo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob_sql",
								"type": "DatasetReference",
								"parameters": {
									"src_folder": {
										"value": "@pipeline().parameters.src_folder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childitems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_blob",
											"type": "DatasetReference",
											"parameters": {
												"blobfolder": {
													"value": "@pipeline().parameters.src_folder",
													"type": "Expression"
												},
												"blobfile": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob",
											"type": "DatasetReference",
											"parameters": {
												"blobfolder": {
													"value": "@pipeline().parameters.desfolder",
													"type": "Expression"
												},
												"blobfile": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"src_folder": {
						"type": "string"
					},
					"desfolder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Narendra"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-26T13:42:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_json')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['Category']"
										},
										"sink": {
											"name": "Category",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Regions'][0]['Region']"
										},
										"sink": {
											"name": "Region",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Regions'][0]['Sub-Categories'][0]['Sub-Category']"
										},
										"sink": {
											"name": "Sub-Category",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Regions'][0]['Sub-Categories'][0]['EmployeeSales'][0]['Employee']"
										},
										"sink": {
											"name": "Employee",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Regions'][0]['Sub-Categories'][0]['EmployeeSales'][0]['Sales']"
										},
										"sink": {
											"name": "Sales",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['Regions'][0]['Sub-Categories'][0]['EmployeeSales'][0]['Comment']"
										},
										"sink": {
											"name": "Comment",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText5",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_multiplefilesfrom_multiplelocation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"fileListPath": "multiple3/sai.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "EmpID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmpID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "EmpName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmpName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Salary",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Salary",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_multiplerecordstoblob",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sink_multiple_to_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "Narendra"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T10:29:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_multiplerecordstoblob')]",
				"[concat(variables('factoryId'), '/datasets/ds_sink_multiple_to_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_emp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_emp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"blob": {},
									"sinktoblob": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T10:56:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_emp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dim_customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.partablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onpremises_sql_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "sp_truncate_staging_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_completed_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_piplinestart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_lkp_get_derails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('lkp_get_details').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('lkp_get_details').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_truncatestagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								}
							},
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_onpremises_adw",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "salesdata",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.SourceViewName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.StaingTableName",
										"type": "Expression"
									},
									"schemaname": {
										"value": "@activity('lkp_get_details').output.firstrow.StagingSchemaName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_insert_updatedimtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@activity('lkp_get_details').output.firstrow.ProcedureName",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"partablename": {
						"type": "string",
						"defaultValue": "Customer"
					}
				},
				"variables": {
					"varviewname": {
						"type": "String",
						"defaultValue": "Test"
					},
					"vardimtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varstagingtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varprocedure": {
						"type": "String",
						"defaultValue": "Test"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-03T14:42:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremise_sql_ConfigDB')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_sql_configdb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_synapse_ribs')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_adw')]",
				"[concat(variables('factoryId'), '/datasets/ds_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dim_customer1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_initial_pipe_line_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Asp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Inprogress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sqlserver_configDB_ashwanth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_initial_pipe_line_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.tablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sqlserver_configDB_ashwanth",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "sp_truncate_stg_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lkp_get_details').output.value[0].stagingschemaname",
										"type": "Expression"
									}
								},
								"tablename": {
									"value": {
										"value": "@activity('lkp_get_details').output.value[0].staingtablename",
										"type": "Expression"
									}
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sqlserver_DWH_ashwanth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging_from_source",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_stg_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sqlserver_adventure_ashwanth",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "salesdata",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lkp_get_details').output.value[0].SourceViewName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sqlserver_DWH_ashwanth",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "@activity('lkp_get_details').output.value[0].stagingschemaname",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lkp_get_details').output.value[0].staingtablename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_insert_update_dim_customer",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging_from_source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Insert_update_dimcustomer]"
						},
						"linkedServiceName": {
							"referenceName": "ls_sqlserver_DWH_ashwanth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_pipeline_status_completed",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_update_dim_customer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Asp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sqlserver_configDB_ashwanth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_initial_pipe_line_error_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_initial_pipe_line_status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Asp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_initial_pipe_line_status').error.errorcode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_initial_pipe_line_status').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sqlserver_configDB_ashwanth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_lkp_error_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Asp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('lkp_get_details').error.errorcode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('lkp_get_details').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sqlserver_configDB_ashwanth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_truncate_error_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_truncate_stg_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Asp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_truncate_stg_table').error.errorcode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_truncate_stg_table').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sqlserver_configDB_ashwanth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_error_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging_from_source",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Asp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('cp_to_staging_from_source').error.errorcode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('cp_to_staging_from_source').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sqlserver_configDB_ashwanth",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_reporting_error_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_update_dim_customer",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Asp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_insert_update_dim_customer').error.errorcode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_insert_update_dim_customer').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_sqlserver_configDB_ashwanth",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ashwanth project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-04T10:57:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sqlserver_configDB_ashwanth')]",
				"[concat(variables('factoryId'), '/datasets/ds_sqlserver_configDB_ashwanth')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sqlserver_DWH_ashwanth')]",
				"[concat(variables('factoryId'), '/datasets/ds_sqlserver_adventure_ashwanth')]",
				"[concat(variables('factoryId'), '/datasets/ds_sqlserver_DWH_ashwanth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dim_product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.partablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onpremises_sql_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "sp_truncate_staging_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_completed_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_piplinestart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_lkp_get_derails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('lkp_get_details').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('lkp_get_details').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_truncatestagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								}
							},
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_onpremises_adw",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "salesdata",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.SourceViewName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.StaingTableName",
										"type": "Expression"
									},
									"schemaname": {
										"value": "@activity('lkp_get_details').output.firstrow.StagingSchemaName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_insert_updatedimtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@activity('lkp_get_details').output.firstrow.ProcedureName",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"partablename": {
						"type": "string",
						"defaultValue": "Product"
					}
				},
				"variables": {
					"varviewname": {
						"type": "String",
						"defaultValue": "Test"
					},
					"vardimtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varstagingtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varprocedure": {
						"type": "String",
						"defaultValue": "Test"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-30T13:00:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremise_sql_ConfigDB')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_sql_configdb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_synapse_ribs')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_adw')]",
				"[concat(variables('factoryId'), '/datasets/ds_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dim_productcategory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.partablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onpremises_sql_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "sp_truncate_staging_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_completed_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_piplinestart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_lkp_get_derails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('lkp_get_details').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('lkp_get_details').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_truncatestagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								}
							},
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_onpremises_adw",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "salesdata",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.SourceViewName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.StaingTableName",
										"type": "Expression"
									},
									"schemaname": {
										"value": "@activity('lkp_get_details').output.firstrow.StagingSchemaName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_insert_updatedimtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@activity('lkp_get_details').output.firstrow.ProcedureName",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"partablename": {
						"type": "string",
						"defaultValue": "ProductCategory"
					}
				},
				"variables": {
					"varviewname": {
						"type": "String",
						"defaultValue": "Test"
					},
					"vardimtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varstagingtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varprocedure": {
						"type": "String",
						"defaultValue": "Test"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-30T13:00:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremise_sql_ConfigDB')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_sql_configdb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_synapse_ribs')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_adw')]",
				"[concat(variables('factoryId'), '/datasets/ds_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dim_productcategory1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_insert_initialpipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Inprogress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_SqlServer_mahendra_configdb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lp_getdata_db",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_insert_initialpipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.tablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_mahemdra_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "sp_truncate_stagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lp_getdata_db",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lp_getdata_db').output.value[0].StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lp_getdata_db').output.value[0].StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_datawarehouse_mahendra",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_stagingtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_mahendra_Adventure",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": "salesdata",
									"tablename": {
										"value": "@activity('lp_getdata_db').output.value[0].sourceviewname",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sqlserver_DWH_mahendra",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "@activity('lp_getdata_db').output.value[0].stagingschemaname",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lp_getdata_db').output.value[0].staingtablename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "mahendra_Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-03T14:42:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_SqlServer_mahendra_configdb')]",
				"[concat(variables('factoryId'), '/datasets/ds_mahemdra_configdb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_datawarehouse_mahendra')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_mahendra_Adventure')]",
				"[concat(variables('factoryId'), '/datasets/ds_sqlserver_DWH_mahendra')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dim_productcategory2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_insert_initialpipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Inprogress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_SqlServer_mahendra_configdb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lp_getdata_db",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_insert_initialpipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.tablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_mahemdra_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "sp_truncate_stagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lp_getdata_db",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lp_getdata_db').output.value[0].StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lp_getdata_db').output.value[0].StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_datawarehouse_mahendra",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_stagingtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_mahendra_Adventure",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": "salesdata",
									"tablename": {
										"value": "@activity('lp_getdata_db').output.value[0].sourceviewname",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sqlserver_DWH_mahendra",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "@activity('lp_getdata_db').output.value[0].stagingschemaname",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lp_getdata_db').output.value[0].staingtablename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_completed_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "Null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "Null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_SqlServer_mahendra_configdb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "mahendra_Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-04T11:46:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_SqlServer_mahendra_configdb')]",
				"[concat(variables('factoryId'), '/datasets/ds_mahemdra_configdb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_datawarehouse_mahendra')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_mahendra_Adventure')]",
				"[concat(variables('factoryId'), '/datasets/ds_sqlserver_DWH_mahendra')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dim_productcatogory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_INSERT_UPDATE_PROD]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null"
								},
								"PipelineErrorMessage": {
									"value": "null"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								},
								"PipelineStatus": {
									"value": "inprogress"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_piplinestart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_INSERT_UPDATE_PROD]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.partablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_lookup_mydb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "sp_truncate_staging_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								}
							},
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ls_sql_advanturedatabase",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": "salesdata",
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.SourceViewName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_mybd_np",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "@activity('lkp_get_details').output.firstrow.StagingSchemaName",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.StaingTableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_completed_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status_copy2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_INSERT_UPDATE_PROD]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null"
								},
								"PipelineErrorMessage": {
									"value": "null"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								},
								"PipelineStatus": {
									"value": "completed"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_Insert_pipeline_status_copy2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_INSERT_UPDATE_PROD]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": ""
								},
								"PipelineErrorMessage": {
									"value": ""
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								},
								"PipelineStatus": {
									"value": ""
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_lkp_get_derails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_INSERT_UPDATE_PROD]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_truncatestagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_INSERT_UPDATE_PROD]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_INSERT_UPDATE_PROD]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status_copy2",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_INSERT_UPDATE_PROD]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"partablename": {
						"type": "string"
					}
				},
				"variables": {
					"varviewname": {
						"type": "String"
					},
					"vardimtable": {
						"type": "String"
					},
					"varstagingtable": {
						"type": "String"
					},
					"varprocedure": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Narendra"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-01T11:37:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sqlserver_np')]",
				"[concat(variables('factoryId'), '/datasets/ds_lookup_mydb')]",
				"[concat(variables('factoryId'), '/datasets/ls_sql_advanturedatabase')]",
				"[concat(variables('factoryId'), '/datasets/ds_mybd_np')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dim_productsubcategory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.partablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onpremises_sql_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "sp_truncate_staging_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_completed_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_piplinestart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_lkp_get_derails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('lkp_get_details').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('lkp_get_details').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_truncatestagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								}
							},
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_onpremises_adw",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "salesdata",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.SourceViewName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.StaingTableName",
										"type": "Expression"
									},
									"schemaname": {
										"value": "@activity('lkp_get_details').output.firstrow.StagingSchemaName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_insert_updatedimtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@activity('lkp_get_details').output.firstrow.ProcedureName",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"partablename": {
						"type": "string",
						"defaultValue": "ProductSubCategory"
					}
				},
				"variables": {
					"varviewname": {
						"type": "String",
						"defaultValue": "Test"
					},
					"vardimtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varstagingtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varprocedure": {
						"type": "String",
						"defaultValue": "Test"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-30T13:00:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremise_sql_ConfigDB')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_sql_configdb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_synapse_ribs')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_adw')]",
				"[concat(variables('factoryId'), '/datasets/ds_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dim_productsubcategory2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_insert_initialpipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Inprogress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_SqlServer_mahendra_configdb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lp_getdata_db",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_insert_initialpipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.tablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_mahemdra_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "sp_truncate_stagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lp_getdata_db",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lp_getdata_db').output.value[0].StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lp_getdata_db').output.value[0].StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_datawarehouse_mahendra",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_stagingtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_mahendra_Adventure",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": "salesdata",
									"tablename": {
										"value": "@activity('lp_getdata_db').output.value[0].sourceviewname",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sqlserver_DWH_mahendra",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "@activity('lp_getdata_db').output.value[0].stagingschemaname",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lp_getdata_db').output.value[0].staingtablename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_completed_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "Null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "Null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_SqlServer_mahendra_configdb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "mahendra_Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-04T12:00:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_SqlServer_mahendra_configdb')]",
				"[concat(variables('factoryId'), '/datasets/ds_mahemdra_configdb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_datawarehouse_mahendra')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_mahendra_Adventure')]",
				"[concat(variables('factoryId'), '/datasets/ds_sqlserver_DWH_mahendra')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dim_productsubcategory_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.partablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onpremises_sql_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "sp_truncate_staging_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_completed_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_piplinestart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_lkp_get_derails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('lkp_get_details').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('lkp_get_details').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_truncatestagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								}
							},
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_onpremises_adw",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "salesdata",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.SourceViewName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.StaingTableName",
										"type": "Expression"
									},
									"schemaname": {
										"value": "@activity('lkp_get_details').output.firstrow.StagingSchemaName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_insert_updatedimtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@activity('lkp_get_details').output.firstrow.ProcedureName",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"partablename": {
						"type": "string",
						"defaultValue": "ProductSubCategory"
					}
				},
				"variables": {
					"varviewname": {
						"type": "String",
						"defaultValue": "Test"
					},
					"vardimtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varstagingtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varprocedure": {
						"type": "String",
						"defaultValue": "Test"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-31T03:55:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremise_sql_ConfigDB')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_sql_configdb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_synapse_ribs')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_adw')]",
				"[concat(variables('factoryId'), '/datasets/ds_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dim_salesterriority')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.partablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onpremises_sql_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "sp_truncate_staging_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_completed_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_piplinestart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_lkp_get_derails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('lkp_get_details').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('lkp_get_details').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_truncatestagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								}
							},
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_onpremises_adw",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "salesdata",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.SourceViewName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.StaingTableName",
										"type": "Expression"
									},
									"schemaname": {
										"value": "@activity('lkp_get_details').output.firstrow.StagingSchemaName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_insert_updatedimtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@activity('lkp_get_details').output.firstrow.ProcedureName",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"partablename": {
						"type": "string",
						"defaultValue": "SalesTerritory"
					}
				},
				"variables": {
					"varviewname": {
						"type": "String",
						"defaultValue": "Test"
					},
					"vardimtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varstagingtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varprocedure": {
						"type": "String",
						"defaultValue": "Test"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-30T13:00:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremise_sql_ConfigDB')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_sql_configdb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_synapse_ribs')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_adw')]",
				"[concat(variables('factoryId'), '/datasets/ds_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_email_notification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "send-email",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-01.eastus2.logic.azure.com:443/workflows/53550fda499a408abb3f69c0cfb550c6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itX5RPvskxILBXJ9xx8gzNffnmCV90BUdFzb4WqqWdk",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"title\": \"@{pipeline().Pipeline}  executed successfully\",\n    \"message\": \"@{pipeline().Pipeline}  executed successfully\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\",\n    \"emailaddress\":\"@{pipeline().parameters.emailaddress}\"\n}\n",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"emailaddress": {
						"type": "string",
						"defaultValue": "rsnbhupathi@gmail.com;sbhupathi1983@gmail.com"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-05-31T14:11:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_errorhandlin_example')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "cp_data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "seterror",
							"value": {
								"value": "success",
								"type": "Expression"
							}
						}
					},
					{
						"name": "cp_data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_saribs",
								"type": "DatasetReference",
								"parameters": {
									"filename": "country"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_saribs_movie",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable1_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "cp_data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "seterror",
							"value": {
								"value": "@activity('cp_data').output.errors[0].Message",
								"type": "Expression"
							}
						}
					}
				],
				"variables": {
					"seterror": {
						"type": "String",
						"defaultValue": "error"
					}
				},
				"folder": {
					"name": "A-Surya Sir"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T12:44:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_saribs')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_saribs_movie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_errorhandlin_example2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "cp_data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varfilename",
							"value": {
								"value": "country",
								"type": "Expression"
							}
						}
					},
					{
						"name": "cp_data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_saribs",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_saribs_movie",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "cp_data_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_saribs",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@variables('varfilename')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_saribs_movie",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "country"
					}
				},
				"variables": {
					"varfilename": {
						"type": "String",
						"defaultValue": "test"
					}
				},
				"folder": {
					"name": "A-Surya Sir"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T12:44:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_saribs')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_saribs_movie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_errorhandlin_example3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "cp_data",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "seterror",
							"value": {
								"value": "success",
								"type": "Expression"
							}
						}
					},
					{
						"name": "cp_data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_saribs",
								"type": "DatasetReference",
								"parameters": {
									"filename": "country"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_saribs_movie",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable1_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "cp_data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "seterror",
							"value": {
								"value": "success",
								"type": "Expression"
							}
						}
					}
				],
				"variables": {
					"seterror": {
						"type": "String",
						"defaultValue": "error"
					}
				},
				"folder": {
					"name": "A-Surya Sir"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T12:44:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_saribs')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_saribs_movie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_executepipeline_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "exp_forecha",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_errorhandlin_example",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"folder": {
					"name": "A-Surya Sir"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T12:44:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_errorhandlin_example')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_fact_delta_factsales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "lkp_get_lastupdatedate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.partablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onpremises_sql_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "sp_truncate_staging_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_completed_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_update_watermark_lastUpdateddate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_piplinestart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_lkp_get_derails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('lkp_get_details').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('lkp_get_details').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_truncatestagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT [SalesOrderID]\n      ,[SalesOrderDetailID]\n      ,[CarrierTrackingNumber]\n      ,[OrderQty]\n      ,[ProductNumber]\n      ,[ProductID]\n      ,[UnitPrice]\n      ,[UnitPriceDiscount]\n      ,[TotalAmount]\n      ,[OrderDate]\n      ,[DueDate]\n      ,[ShipDate]\n      ,[OrderMode]\n      ,[CustomerNumber]\n      ,[TerriorityName]\n      ,[ModifiedDate]\n  FROM [salesdata].[@{activity('lkp_get_details').output.firstrow.SourceViewName}]\n  WHERE CAST(ModifiedDate AS date) >= CAST('@{activity('lkp_get_lastupdatedate').output.firstrow.LastUpdateDate}' AS date)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								}
							},
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_onpremises_adw_for_dynamicQuery",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.StaingTableName",
										"type": "Expression"
									},
									"schemaname": {
										"value": "@activity('lkp_get_details').output.firstrow.StagingSchemaName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_insert_updatedimtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@activity('lkp_get_details').output.firstrow.ProcedureName",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_lastupdatedate",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT LastUpdateDate FROM Watermark WHERE TableName='@{pipeline().parameters.partablename}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onpremises_sql_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "lkp_get_max_update_fact",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": "SELECT TOP 1 MAX(LastUpdatedDate) AS LastUpdatedDate FROM [Reporting].[FactSales]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "xxx",
									"schemaname": "ttt"
								}
							}
						}
					},
					{
						"name": "sp_update_watermark_lastUpdateddate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_max_update_fact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Watermark_update_lastupdate]",
							"storedProcedureParameters": {
								"LastUpdatedDate": {
									"value": {
										"value": "@activity('lkp_get_max_update_fact').output.firstrow.LastUpdatedDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.partablename",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"partablename": {
						"type": "string",
						"defaultValue": "FactSales"
					}
				},
				"variables": {
					"varviewname": {
						"type": "String",
						"defaultValue": "Test"
					},
					"vardimtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varstagingtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varprocedure": {
						"type": "String",
						"defaultValue": "Test"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-05T04:24:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremise_sql_ConfigDB')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_sql_configdb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_synapse_ribs')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_adw_for_dynamicQuery')]",
				"[concat(variables('factoryId'), '/datasets/ds_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_fact_factsales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_Get_Table_Config_Values]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.partablename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_onpremises_sql_configdb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "sp_truncate_staging_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncate_stagingtable]",
							"storedProcedureParameters": {
								"schemaname": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StagingSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"tablename": {
									"value": {
										"value": "@activity('lkp_get_details').output.firstRow.StaingTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_azure_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_completed_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_update_watermark_lastUpdateddate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_piplinestart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_Insert_pipeline_status').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_lkp_get_derails",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_details",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('lkp_get_details').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('lkp_get_details').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_truncatestagingtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_truncate_staging_table').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cp_to_staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_truncate_staging_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								}
							},
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_onpremises_adw",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "salesdata",
										"type": "Expression"
									},
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.SourceViewName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@activity('lkp_get_details').output.firstrow.StaingTableName",
										"type": "Expression"
									},
									"schemaname": {
										"value": "@activity('lkp_get_details').output.firstrow.StagingSchemaName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_insert_updatedimtable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@activity('lkp_get_details').output.firstrow.ProcedureName",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_to_staging",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('cp_to_staging').output.Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_error_sopystaging_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": {
										"value": "@activity('sp_insert_updatedimtable').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_get_max_update_fact",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_insert_updatedimtable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": "SELECT TOP 1 MAX(LastUpdatedDate) AS LastUpdatedDate FROM [Reporting].[FactSales]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "xxx",
									"schemaname": "ttt"
								}
							}
						}
					},
					{
						"name": "sp_update_watermark_lastUpdateddate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "lkp_get_max_update_fact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Watermark_update_lastupdate]",
							"storedProcedureParameters": {
								"LastUpdatedDate": {
									"value": {
										"value": "@activity('lkp_get_max_update_fact').output.firstrow.LastUpdatedDate",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.partablename",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"partablename": {
						"type": "string",
						"defaultValue": "FactSales"
					}
				},
				"variables": {
					"varviewname": {
						"type": "String",
						"defaultValue": "Test"
					},
					"vardimtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varstagingtable": {
						"type": "String",
						"defaultValue": "Test"
					},
					"varprocedure": {
						"type": "String",
						"defaultValue": "Test"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-05T03:55:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremise_sql_ConfigDB')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_sql_configdb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_synapse_ribs')]",
				"[concat(variables('factoryId'), '/datasets/ds_onpremises_adw')]",
				"[concat(variables('factoryId'), '/datasets/ds_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_synapse_ribs')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_getmetadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_folder_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().parameters.folder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childitems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_file_folder_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@pipeline().parameters.folder",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_file_folder_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@pipeline().parameters.sinkfolder",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"folder": {
						"type": "string",
						"defaultValue": "string"
					},
					"sinkfolder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "venu"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-29T08:39:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_folder_dynamic')]",
				"[concat(variables('factoryId'), '/datasets/ds_file_folder_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "table name lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select tablename from dbo.tablename;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_output",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "xxx"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "table foreachloop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "table name lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('table name lookup').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "cop data from sql to blob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_sql_output",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@item().tablename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob",
											"type": "DatasetReference",
											"parameters": {
												"blobfolder": {
													"value": "@pipeline().parameters.des_folder",
													"type": "Expression"
												},
												"blobfile": {
													"value": "@item().tablename",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"des_folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Narendra"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-27T11:26:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_lookup_Foreach_wait_until')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_tabledetails",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "until_condiitontrue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": "SELECT ID,ViewName,TableName,FileName FROM Pipelineinformation",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_synapse_ribs",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "xxx",
									"schemaname": "xxx"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "foreach_tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_tabledetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_tabledetails').output.value\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "cp_synapase_blob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_synapse_ribs",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@item().ViewName",
													"type": "Expression"
												},
												"schemaname": "xxxx"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob_saribs",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().FileName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "until_condiitontrue",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,activity('lkp_truevalue').output.firstrow.result)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "lkp_truevalue",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": {
												"value": "SELECT 1 result FROM  DependentPipeline WHERE Pipelinename='@{pipeline().parameters.previouspipeline}' and Pipelinestatus='Completed'\n\tUNION\n\tSELECT 0 AS result",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_synapse_ribs",
											"type": "DatasetReference",
											"parameters": {
												"tablename": "xxx",
												"schemaname": "xxx"
											}
										}
									}
								},
								{
									"name": "Wait_2mins",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "lkp_truevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 2
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"parameters": {
					"previouspipeline": {
						"type": "string",
						"defaultValue": "Dimensionload"
					}
				},
				"folder": {
					"name": "A-Surya Sir"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-30T06:09:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_synapse_ribs')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_lookup_untill_wait')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "table name lookup",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "until status completed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select tablename from dbo.tablename;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_output",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "xxx"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "table foreachloop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "table name lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('table name lookup').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "cop data from sql to blob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_sql_output",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@item().tablename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob",
											"type": "DatasetReference",
											"parameters": {
												"blobfolder": {
													"value": "@pipeline().parameters.des_folder",
													"type": "Expression"
												},
												"blobfile": {
													"value": "@item().tablename",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "until status completed",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,activity('Lookup1').output.firstrow.result)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select 1 as result from tab_status where t_status='completed'\nunion\nselect 0 as result;",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sql_output",
											"type": "DatasetReference",
											"parameters": {
												"tablename": "xxx"
											}
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 20
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"parameters": {
					"des_folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Narendra"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-27T09:36:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_masterdelta_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_factsales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_dimensionload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_fact_delta_factsales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ep_factsales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ep_dimensionload",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_masterdimension_load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "send-email-on-completion",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "sp_update_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-01.eastus2.logic.azure.com:443/workflows/53550fda499a408abb3f69c0cfb550c6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itX5RPvskxILBXJ9xx8gzNffnmCV90BUdFzb4WqqWdk",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"title\": \"@{pipeline().Pipeline}  executed successfully\",\n    \"message\": \"@{pipeline().Pipeline}  executed successfully\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\",\n    \"emailaddress\":\"@{pipeline().parameters.emailaddress}\"\n}\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "send-email-on-failur-dimension",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ep_dimensionload",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-01.eastus2.logic.azure.com:443/workflows/53550fda499a408abb3f69c0cfb550c6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itX5RPvskxILBXJ9xx8gzNffnmCV90BUdFzb4WqqWdk",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"title\": \"@{pipeline().Pipeline} Failed\",\n    \"message\": \"@{activity('ep_dimensionload').error.Message}\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\",\n    \"emailaddress\":\"@{pipeline().parameters.emailaddress}\"\n}\nactivity('ep_dimensionload').output",
								"type": "Expression"
							}
						}
					},
					{
						"name": "send-email-on-failure-fact",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ep_factsales",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-01.eastus2.logic.azure.com:443/workflows/53550fda499a408abb3f69c0cfb550c6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itX5RPvskxILBXJ9xx8gzNffnmCV90BUdFzb4WqqWdk",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"title\": \"@{pipeline().Pipeline}  Failed\",\n    \"message\": \"@{activity('ep_factsales').error.message}\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\",\n    \"emailaddress\":\"@{pipeline().parameters.emailaddress}\"\n}\n",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"parfacttable": {
						"type": "string",
						"defaultValue": "FactSales"
					},
					"parprodcuttable": {
						"type": "string",
						"defaultValue": "Product"
					},
					"parproductCategory": {
						"type": "string",
						"defaultValue": "ProductCategory"
					},
					"parprodsubcategory": {
						"type": "string",
						"defaultValue": "ProductSubCategory"
					},
					"parcustomer": {
						"type": "string",
						"defaultValue": "Customer"
					},
					"parsalesterriority": {
						"type": "string",
						"defaultValue": "SalesTerriority"
					},
					"emailaddress": {
						"type": "string",
						"defaultValue": "prasadnarendra69@gmail.com;rsnbhupathi@gmail.com"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-05T04:24:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_fact_delta_factsales')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremise_sql_ConfigDB')]",
				"[concat(variables('factoryId'), '/pipelines/pl_masterdimension_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_masterdimension_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_product",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_productSubcategory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_dim_product",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partablename": {
									"value": "@pipeline().parameters.parproducttablename",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_productcategory",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_dim_productcategory",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partablename": {
									"value": "@pipeline().parameters.parProductCategorytablename",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_productSubcategory",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_productcategory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_dim_productsubcategory",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partablename": {
									"value": "@pipeline().parameters.parProdcutsubCategorytablename",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_salesterriority_dim",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_customer_dim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_dim_salesterriority",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partablename": {
									"value": "@pipeline().parameters.parSalesTerriorityTableName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ep_customer_dim",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_productcategory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_dim_customer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partablename": {
									"value": "@pipeline().parameters.parCustomerTableName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ep_product",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ep_salesterriority_dim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"parproducttablename": {
						"type": "string",
						"defaultValue": "Product"
					},
					"parProductCategorytablename": {
						"type": "string",
						"defaultValue": "ProductCategory"
					},
					"parProdcutsubCategorytablename": {
						"type": "string",
						"defaultValue": "ProductSubCategory"
					},
					"parCustomerTableName": {
						"type": "string",
						"defaultValue": "Customer"
					},
					"parSalesTerriorityTableName": {
						"type": "string",
						"defaultValue": "SalesTerritory"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-01T11:31:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_dim_product')]",
				"[concat(variables('factoryId'), '/pipelines/pl_dim_productcategory')]",
				"[concat(variables('factoryId'), '/pipelines/pl_dim_productsubcategory')]",
				"[concat(variables('factoryId'), '/pipelines/pl_dim_salesterriority')]",
				"[concat(variables('factoryId'), '/pipelines/pl_dim_customer')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremise_sql_ConfigDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_masterfact_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_factsales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_fact_factsales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partablename": {
									"value": "@pipeline().parameters.parfacttable",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ep_factsales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"parfacttable": {
						"type": "string",
						"defaultValue": "FactSales"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-01T03:58:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_fact_factsales')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremise_sql_ConfigDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_masterfull_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ep_factsales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ep_dimensionload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_masterfact_load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"parfacttable": {
									"value": "@pipeline().parameters.parfacttable",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "sp_Insert_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "InProgress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_update_pipeline_status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ep_factsales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_Pipeline_Insert_Update_Status]",
							"storedProcedureParameters": {
								"PipelineErrorCode": {
									"value": "null",
									"type": "String"
								},
								"PipelineErrorMessage": {
									"value": "null",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStatus": {
									"value": "Completed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_onpremise_sql_ConfigDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ep_dimensionload",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_Insert_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_masterdimension_load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "send-email-on-completion",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "sp_update_pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-01.eastus2.logic.azure.com:443/workflows/53550fda499a408abb3f69c0cfb550c6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itX5RPvskxILBXJ9xx8gzNffnmCV90BUdFzb4WqqWdk",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"title\": \"@{pipeline().Pipeline}  executed successfully\",\n    \"message\": \"@{pipeline().Pipeline}  executed successfully\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\",\n    \"emailaddress\":\"@{pipeline().parameters.emailaddress}\"\n}\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "send-email-on-failur-dimension",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ep_dimensionload",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-01.eastus2.logic.azure.com:443/workflows/53550fda499a408abb3f69c0cfb550c6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itX5RPvskxILBXJ9xx8gzNffnmCV90BUdFzb4WqqWdk",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"title\": \"@{pipeline().Pipeline} Failed\",\n    \"message\": \"@{activity('ep_dimensionload').error.Message}\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\",\n    \"emailaddress\":\"@{pipeline().parameters.emailaddress}\"\n}\nactivity('ep_dimensionload').output",
								"type": "Expression"
							}
						}
					},
					{
						"name": "send-email-on-failure-fact",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ep_factsales",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-01.eastus2.logic.azure.com:443/workflows/53550fda499a408abb3f69c0cfb550c6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itX5RPvskxILBXJ9xx8gzNffnmCV90BUdFzb4WqqWdk",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n \"title\": \"@{pipeline().Pipeline}  Failed\",\n    \"message\": \"@{activity('ep_factsales').error.message}\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\",\n    \"emailaddress\":\"@{pipeline().parameters.emailaddress}\"\n}\n",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"parfacttable": {
						"type": "string",
						"defaultValue": "FactSales"
					},
					"parprodcuttable": {
						"type": "string",
						"defaultValue": "Product"
					},
					"parproductCategory": {
						"type": "string",
						"defaultValue": "ProductCategory"
					},
					"parprodsubcategory": {
						"type": "string",
						"defaultValue": "ProductSubCategory"
					},
					"parcustomer": {
						"type": "string",
						"defaultValue": "Customer"
					},
					"parsalesterriority": {
						"type": "string",
						"defaultValue": "SalesTerriority"
					},
					"emailaddress": {
						"type": "string",
						"defaultValue": "prasadnarendra69@gmail.com;rsnbhupathi@gmail.com"
					}
				},
				"folder": {
					"name": "Project"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-01T04:26:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_masterfact_load')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremise_sql_ConfigDB')]",
				"[concat(variables('factoryId'), '/pipelines/pl_masterdimension_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_merge_blob_to_blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cp_blob_to_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false,
									"prefix": "emp"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_emp_ashwanth",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_ashwanth12",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T10:10:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_emp_ashwanth')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_ashwanth12')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_poc1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "retriving data from sqldb",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "retriving data from sqldb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('retriving data from sqldb').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from demo where name = '@item().name'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ls_datalakegen2",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"tablename": {
						"type": "string",
						"defaultValue": "xxx"
					}
				},
				"folder": {
					"name": "test"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-15T08:22:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/ls_datalakegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sqlserver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_file_folder_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().parameters.srcfolder",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.srcfile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_SqlServerTable_venu",
								"type": "DatasetReference",
								"parameters": {
									"table_name": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"srcfolder": {
						"type": "string"
					},
					"srcfile": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "venu"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-29T09:27:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_file_folder_dynamic')]",
				"[concat(variables('factoryId'), '/datasets/ds_SqlServerTable_venu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sqlserver_to_blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cp_sqlserver_to_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sqlserver_ash",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_demo_ash",
								"type": "DatasetReference",
								"parameters": {
									"foldername": {
										"value": "@pipeline().parameters.foldername",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"tablename": {
						"type": "string"
					},
					"foldername": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-31T13:17:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sqlserver_ash')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_demo_ash')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sqltoblob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_to_blob",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@pipeline().parameters.Table_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_copyfrom_sql",
								"type": "DatasetReference",
								"parameters": {
									"folder_name": {
										"value": "@pipeline().parameters.folder_name",
										"type": "Expression"
									},
									"File_name": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"folder_name": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"Table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "abrar"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T10:55:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_to_blob')]",
				"[concat(variables('factoryId'), '/datasets/ds_copyfrom_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_storedprocedure_activity_example')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_insert_data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_INSERT_PRODCUT]",
							"storedProcedureParameters": {
								"Class": {
									"value": "Medium12",
									"type": "String"
								},
								"Colour": {
									"value": "Blue12",
									"type": "String"
								},
								"ProductId": {
									"value": "114",
									"type": "Int32"
								},
								"ProductName": {
									"value": "PPP",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_synapse_ribs",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "A-Surya Sir"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T12:44:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_synapse_ribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_testdataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dftestmovie",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dftestmoviedata",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"moviedata": {},
									"sinkavgratingbyyead": {},
									"sinkavgbygeners": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "A-Surya Sir"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-28T12:44:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dftestmoviedata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_storeprocedure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[myproc]"
						},
						"linkedServiceName": {
							"referenceName": "Sqlserver_np",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Narendra"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-26T17:43:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sqlserver_np')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/waitpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 30
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-06-16T05:30:22Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_pocsqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "demo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_pocsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "product1.csv",
						"container": "abrar"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "productid",
						"type": "String"
					},
					{
						"name": "productname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "product.csv",
						"container": "abrar"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "ProductName",
						"type": "String"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "Size",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "venu"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "abcdef.csv",
						"container": "narendra"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_pku')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "themes.csv",
						"container": "narendra"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "JSONFILE.json",
						"container": "narendra"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Category": {
							"type": "string"
						},
						"Regions": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Region": {
										"type": "string"
									},
									"Sub-Categories": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"Sub-Category": {
													"type": "string"
												},
												"EmployeeSales": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"Employee": {
																"type": "string"
															},
															"Sales": {
																"type": "integer"
															},
															"Comment": {
																"type": "string"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_pku')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "themes.csv.gz"
					},
					"compression": {
						"type": "GZip",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer_practice')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sqlserver_np",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_name",
						"type": "varchar"
					},
					{
						"name": "color",
						"type": "varchar"
					},
					{
						"name": "class",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "practice_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sqlserver_np')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ConfigDB_hash')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_selfhost_hasham",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_selfhost_hasham')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SqlServerTable_venu')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_SqlServer_venu",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "venu"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_SqlServer_venu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"blobfolder": {
						"type": "string"
					},
					"blobfile": {
						"type": "string"
					}
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().blobfile",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().blobfolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_ash')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().foldername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_ash1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"scr_folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().scr_folder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_ashwanth')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().foldername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_ashwanth12')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "merge.csv",
						"container": "ashwanth"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_demo_ash')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().foldername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_emp_ashwanth')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "ashwanth"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().foldername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_folderR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourcefolder": {
						"type": "string"
					},
					"source file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Raja"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().source file",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().sourcefolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_for_df_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "merge.csv",
						"container": "ashwanth"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_for_df_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "ashwanth"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OrderID",
						"type": "String"
					},
					{
						"name": "OrderDate",
						"type": "String"
					},
					{
						"name": "CustomerName",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Sales",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Discount",
						"type": "String"
					},
					{
						"name": "Profit",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_order_details_ashwanth')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "ashwanth"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Oid",
						"type": "String"
					},
					{
						"name": "Oname",
						"type": "String"
					},
					{
						"name": "amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_saribs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "xxx"
					}
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_saribs_movie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "moviesDB.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"src_folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().src_folder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_to_blob_activity1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sinkfolder": {
						"type": "string"
					},
					"sinkfile": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Raja"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().sinkfile",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().sinkfolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blobfolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().foldername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_copyfrom_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder_name": {
						"type": "string"
					},
					"File_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "abrar"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().File_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().folder_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_file_folder_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "string",
						"defaultValue": "string"
					},
					"filename": {
						"type": "string",
						"defaultValue": "string"
					}
				},
				"folder": {
					"name": "venu"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().folder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_folder_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "string",
						"defaultValue": "string"
					}
				},
				"folder": {
					"name": "venu"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().folder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_gen2_movie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_gen2_key",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesDB.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_gen2_key')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_gen2_moviedata_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_gen2_key",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesDB.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_gen2_key')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_has_adventure')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_hash_adventure",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_hash_adventure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_has_sql_datawarehouse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_has_datawarehouse",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_has_datawarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_lookup_mydb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sqlserver_np",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sqlserver_np')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_mahemdra_configdb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_SqlServer_mahendra_configdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_SqlServer_mahendra_configdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_multiplerecordstoblob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "multiple3"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_mybd_np')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sqlserver_np",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sqlserver_np')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_onpremises_adw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_onpremises_sql_ADW_source",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string",
						"defaultValue": "xxx"
					},
					"tablename": {
						"type": "string",
						"defaultValue": "xxx"
					}
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremises_sql_ADW_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_onpremises_adw_for_dynamicQuery')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_onpremises_sql_ADW_source",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremises_sql_ADW_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_onpremises_sql_configdb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_onpremise_sql_ConfigDB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_onpremise_sql_ConfigDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_gen2_key",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_gen2_key')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sink_multiple_to_blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "narendra.csv",
						"container": "multiple2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_mahendra')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Sqlserver_mahendra",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "mahendra"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_Sqlserver_mahendra')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_mahendra_Adventure')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer3",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "mahendra"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sqlserver_np",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sqlserver_np')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_to_blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sqlserver_np",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "abrar"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductName",
						"type": "varchar"
					},
					{
						"name": "Color",
						"type": "varchar"
					},
					{
						"name": "Size",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sqlserver_np')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sqlserver_DWH_ashwanth')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqlserver_DWH_ashwanth",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sqlserver_DWH_ashwanth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sqlserver_DWH_mahendra')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datawarehouse_mahendra",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datawarehouse_mahendra')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sqlserver_adventure_ashwanth')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqlserver_adventure_ashwanth",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sqlserver_adventure_ashwanth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sqlserver_ash')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_sql_server_ashwanth",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_sql_server_ashwanth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sqlserver_configDB_ashwanth')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqlserver_configDB_ashwanth",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ashwanth"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sqlserver_configDB_ashwanth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sqlserver_mahi')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Sqlserver_mahendra",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "mahendra"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_Sqlserver_mahendra')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_synapse_ribs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapse_ribs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string",
						"defaultValue": "xxx"
					},
					"schemaname": {
						"type": "string"
					}
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_synapse_ribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsontocsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_saribs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_saribs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_datalakegen2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalakegen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"fileSystem": "new"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalakegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_advanturedatabase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_npsql_advanture2014",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "general"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_npsql_advanture2014')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/np_ds_adventure2014')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_npsql_advanture2014",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Narendra"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_npsql_advanture2014')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/np_ds_datawarehouse_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "np_ls_sql_warehouse",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/np_ls_sql_warehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/np_ds_mydb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sqlserver_np",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Narendra"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sqlserver_np')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/np_ds_sql_noparameter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sqlserver_np",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sqlserver_np')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_sql_server_ashwanth')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('LS_sql_server_ashwanth_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhosted-ashwanth",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhosted-ashwanth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ir-surya-local",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ir-surya-local')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer3_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhosted-mahendra",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhosted-mahendra')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sqlserver_np')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Sqlserver_np_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ribs-selfhosted-ir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ribs-selfhosted-ir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/is_linked_raja')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('is_linked_raja_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/kv_ribs_dev')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('kv_ribs_dev_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_SqlServer_mahendra_configdb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_SqlServer_mahendra_configdb_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhosted-mahendra",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhosted-mahendra')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_SqlServer_venu')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_SqlServer_venu_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhosted-venu",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhosted-venu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_Sqlserver_mahendra')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_Sqlserver_mahendra_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhosted-mahendra",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhosted-mahendra')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azure_synapse_ribs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_azure_synapse_ribs_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "kv_ribs_dev",
							"type": "LinkedServiceReference"
						},
						"secretName": "ribssynapsepassword"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/kv_ribs_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_blob_saribs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_blob_saribs_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_datalakegen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_datalakegen2_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_datawarehouse_mahendra')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_datawarehouse_mahendra_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhosted-mahendra",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhosted-mahendra')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_gen2_key')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_gen2_key_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_gen2_key_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_has_datawarehouse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_has_datawarehouse_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhostedhasham",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhostedhasham')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_hash_adventure')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_hash_adventure_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhostedhasham",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhostedhasham')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_npsql_advanture2014')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_npsql_advanture2014_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ribs-selfhosted-ir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ribs-selfhosted-ir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_onpremise_sql_ConfigDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_onpremise_sql_ConfigDB_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "kv_ribs_dev",
							"type": "LinkedServiceReference"
						},
						"secretName": "sqlonpremisespassword"
					}
				},
				"connectVia": {
					"referenceName": "ir-surya-local",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ir-surya-local')]",
				"[concat(variables('factoryId'), '/linkedServices/kv_ribs_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_onpremises_sql_ADW_source')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_onpremises_sql_ADW_source_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "kv_ribs_dev",
							"type": "LinkedServiceReference"
						},
						"secretName": "sqlonpremisespassword"
					}
				},
				"connectVia": {
					"referenceName": "ir-surya-local",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ir-surya-local')]",
				"[concat(variables('factoryId'), '/linkedServices/kv_ribs_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_pocsqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_pocsqldb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_selfhost_hasham')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_selfhost_hasham_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhostedhasham",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhostedhasham')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_has_Datawarehouse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_has_Datawarehouse_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhostedhasham",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhostedhasham')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_hash_AdventureWorks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_hash_AdventureWorks_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhostedhasham",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhostedhasham')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sqlserver_DWH_ashwanth')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_sqlserver_DWH_ashwanth_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhosted-ashwanth",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhosted-ashwanth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sqlserver_adventure_ashwanth')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_sqlserver_adventure_ashwanth_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhosted-ashwanth",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhosted-ashwanth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sqlserver_configDB_ashwanth')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_sqlserver_configDB_ashwanth_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-selfhosted-ashwanth",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-selfhosted-ashwanth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_synapse_ribs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_synapse_ribs_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/np_azure_keyvault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('np_azure_keyvault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/np_ls_sql_warehouse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('np_ls_sql_warehouse_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ribs-selfhosted-ir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ribs-selfhosted-ir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfhosted_raja_is')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('selfhosted_raja_is_connectionString')]"
				},
				"connectVia": {
					"referenceName": "is-selfhosted-raja",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/is-selfhosted-raja')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventbased')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_errorhandlin_example",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/event/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('eventbased_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_errorhandlin_example')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventbased_example')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_errorhandlin_example2",
							"type": "PipelineReference"
						},
						"parameters": {
							"filename": "[parameters('eventbased_example_properties_pl_errorhandlin_example2_parameters_filename')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/event/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('eventbased_example_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_errorhandlin_example2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tg_masterdimensionload')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_masterdimension_load",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-05-31T05:08:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								5
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_masterdimension_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tg_moviedata_datflow')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_testdataflow",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-05-27T04:28:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"hours": [
								5,
								10,
								14,
								18
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_testdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_example1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_errorhandlin_example2",
							"type": "PipelineReference"
						},
						"parameters": {
							"filename": "[parameters('trigger_example1_properties_pl_errorhandlin_example2_parameters_filename')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-05-28T04:30:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"hours": [
								5,
								9,
								11,
								16
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_errorhandlin_example2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_sche_1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "sql_storeprocedure",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 2,
						"startTime": "2021-05-28T04:43:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/sql_storeprocedure')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR-selfhosted-ashwanth')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR-selfhosted-mahendra')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR-selfhosted-venu')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR-selfhostedhasham')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ir-surya-local')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/is-selfhosted-raja')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ribs-selfhosted-ir')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Narendra"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "productdetails"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "productcolor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText4",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "Sort1"
						}
					],
					"script": "source(output(\n\t\tproductid as string,\n\t\tproductname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> productdetails\nsource(output(\n\t\tProductID as string,\n\t\tProductName as string,\n\t\tColor as string,\n\t\tSize as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['product.csv']) ~> productcolor\nproductdetails, productcolor join(productdetails@productid == productcolor@ProductID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1 sort(asc(productdetails@productid, true)) ~> Sort1\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['test'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tProductID = productcolor@ProductID,\n\t\tProductName = productcolor@ProductName,\n\t\tColor,\n\t\tSize\n\t),\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "jsontocsv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						}
					],
					"script": "source(output(\n\t\tCategory as string,\n\t\tRegions as (Region as string, {Sub-Categories} as (EmployeeSales as (Comment as string, Employee as string, Sales as integer)[], {Sub-Category} as string)[])[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'arrayOfDocuments',\n\thasComments: true,\n\tpartitionBy('hash', 1)) ~> source1\nsource1 foldDown(unroll(Regions.{Sub-Categories}.EmployeeSales, Regions),\n\tmapColumn(\n\t\tCategoty = Category,\n\t\tRegion = Regions.Region,\n\t\t{Sub-Category} = Regions.{Sub-Categories}.{Sub-Category},\n\t\tEmployee = Regions.{Sub-Categories}.EmployeeSales.Employee,\n\t\tSales = Regions.{Sub-Categories}.EmployeeSales.Sales,\n\t\tComment = Regions.{Sub-Categories}.EmployeeSales.Comment\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['jsontocsvfile.tsv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tCategoty,\n\t\tRegion,\n\t\t{Sub-Category},\n\t\tEmployee,\n\t\tSales,\n\t\tComment\n\t),\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/jsontocsv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_emp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_blob_for_df_emp",
								"type": "DatasetReference"
							},
							"name": "blob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_blob_for_df_sink",
								"type": "DatasetReference"
							},
							"name": "sinktoblob"
						}
					],
					"transformations": [
						{
							"name": "Sortempid"
						}
					],
					"script": "source(output(\n\t\tEmpID as integer,\n\t\tEmpName as string,\n\t\tSalary as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> blob\nblob sort(asc(EmpID, false),\n\tpartitionBy('hash', 1)) ~> Sortempid\nSortempid sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tOrderID as string,\n\t\tOrderDate as string,\n\t\tCustomerName as string,\n\t\tCity as string,\n\t\tRegion as string,\n\t\tSales as string,\n\t\tQuantity as string,\n\t\tDiscount as string,\n\t\tProfit as string\n\t),\n\temptyLinesAsHeader: 1,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sinktoblob"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_for_df_emp')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_for_df_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_orders')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ashwanth"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_blob_order_details_ashwanth",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_blob_order_details_ashwanth",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tOid as string,\n\t\tOname as string,\n\t\tamount as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\twildcardPaths:['order_details.txt'],\n\tpartitionBy('hash', 1)) ~> source1\nsource1 select(mapColumn(\n\t\tOrderid = Oid,\n\t\tOrdername = Oname\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tOid as string,\n\t\tOname as string,\n\t\tamount as string\n\t),\n\tpartitionFileNames:['order_details.txt'],\n\ttruncate: true,\n\tmapColumn(\n\t\tOid = Orderid,\n\t\tOname = Ordername\n\t),\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_order_details_ashwanth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dftestmoviedata')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_gen2_moviedata_src",
								"type": "DatasetReference"
							},
							"name": "moviedata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink",
								"type": "DatasetReference"
							},
							"name": "sinkavgratingbyyead"
						},
						{
							"dataset": {
								"referenceName": "ds_sink",
								"type": "DatasetReference"
							},
							"name": "sinkavgbygeners"
						}
					],
					"transformations": [
						{
							"name": "FilterYears"
						},
						{
							"name": "Avgbyyear"
						},
						{
							"name": "AggbyGeners"
						}
					],
					"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> moviedata\nmoviedata filter(toInteger(year) >= 1910 && toInteger(year) <= 2000) ~> FilterYears\nFilterYears aggregate(groupBy(year),\n\tAverageComedyRating = avg(toInteger(Rating))) ~> Avgbyyear\nFilterYears aggregate(groupBy(genres),\n\tAvgbyGeners = avg(toInteger(Rating))) ~> AggbyGeners\nAvgbyyear sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['avgratingbyyear'],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sinkavgratingbyyead\nAggbyGeners sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['avgratingbygeners'],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sinkavgbygeners"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_gen2_moviedata_src')]",
				"[concat(variables('factoryId'), '/datasets/ds_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_gen2_movie",
								"type": "DatasetReference"
							},
							"name": "movesdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink",
								"type": "DatasetReference"
							},
							"name": "sinkblob"
						},
						{
							"dataset": {
								"referenceName": "ds_sink",
								"type": "DatasetReference"
							},
							"name": "sinkgneres"
						}
					],
					"transformations": [
						{
							"name": "FilterYears"
						},
						{
							"name": "AggregateComedyRatings"
						},
						{
							"name": "AggregateBygenres"
						}
					],
					"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer '##0',\n\t\tRating as integer '##0',\n\t\t{Rotton Tomato} as integer '##0'\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tskipLines: 1) ~> movesdata\nmovesdata filter(toInteger(year) >= 1910 && toInteger(year) <= 2000) ~> FilterYears\nFilterYears aggregate(groupBy(year),\n\tAverageComedyRating = avg(toInteger(Rating))) ~> AggregateComedyRatings\nFilterYears aggregate(groupBy(genres),\n\tAverageComedyRating = avg(toInteger(Rating))) ~> AggregateBygenres\nAggregateComedyRatings sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['movierating'],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sinkblob\nAggregateBygenres sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['genrerating'],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sinkgneres"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_gen2_movie')]",
				"[concat(variables('factoryId'), '/datasets/ds_sink')]"
			]
		}
	]
}